#!venv/bin/python
import logging


import conf, keyboards
from aiogram import Bot, Dispatcher, executor, types


import requests
import json

import numpy as np

# –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = Bot(token=conf.TOKEN)
# –î–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è –±–æ—Ç–∞
dp = Dispatcher(bot)
# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)

global true_dict
true_dict = {}


@dp.message_handler(commands='start')
async def process_hi1_command(message: types.Message):
    await message.reply('–ü—Ä–∏–≤–µ—Ç', reply_markup=keyboards.greet_kb)


@dp.message_handler(text='–ü—Ä–∏–≤–µ—Ç! üëã')
async def process_command_2(message: types.Message):
    hello_string = '''–ü—Ä–∏–≤–µ—Ç!\n
–Ø –±–æ—Ç, —Å –∫–æ—Ç–æ—Ä—ã–º –º–æ–∂–Ω–æ –ø–æ—Å–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç—å—Å—è –≤ —É–≥–∞–¥—ã–≤–∞–Ω–∏–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–π –°–æ–ª–∂–µ–Ω–∏—Ü—ã–Ω–∞.\n
–ê –µ—â–µ —è –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –≤–≤–µ–¥–µ–Ω–Ω–∞—è —Ç–æ–±–æ–π —Ñ—Ä–∞–∑–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä—É –ò—Å–∞–µ–≤–∏—á—É)\n
–ö—Å—Ç–∞—Ç–∏, —Ç–µ–∫—Å—Ç –º–æ–∂–µ—à—å –≤–≤–æ–¥–∏—Ç—å –ª—é–±—ã–º —Å–ø–æ—Å–æ–±–æ–º!
–Ø —É–º–µ—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã, –∏ –≥–æ–ª–æ—Å–æ–≤—ã–µüòúüòúüòú'''
    await message.answer(hello_string, reply_markup=keyboards.inline_kb_full)


# @dp.message_handler(text='–ü—Ä–∏–≤–µ—Ç! üëã')
# async def cmd_test1(message: types.Message):
#     chat_id = message.chat.id  # —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ(–ª—Å) —á–∞—Ç–∞ –∏ –¥–ª—è –æ–±—â–∏—Ö —á–∞—Ç–æ–≤ (–≥—Ä—É–ø–ø)
#     await message.reply(chat_id)


@dp.callback_query_handler(text='compete')
async def send_random_value(call: types.CallbackQuery):
    chat_id = call.from_user.id
    print(1)
    answer = requests.get('https://d00f-37-204-7-129.ngrok.io/get_answers', timeout=10)

    phrase_id = answer.json().keys()
    true_dict[chat_id] = phrase_id
    await call.message.answer(list(answer.json().values())[0], reply_markup=keyboards.inline_yesno)


@dp.callback_query_handler(text=['1', '0'])
async def checker(call: types.CallbackQuery):
    chat_id = call.from_user.id
    answer = call.data
    user_answer = {'answer': answer, 'user': chat_id, 'text_id': list(true_dict[chat_id])[0]}
    data_json = json.dumps(user_answer)
    answer = requests.post('https://d00f-37-204-7-129.ngrok.io/to_base', json=data_json, timeout=10) #to the server
    print(answer.json()['next_text'])
    if answer.json()['next_text'] == 1:
        await send_random_value(call=call)
    else:
        await call.message.answer(f'–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n {answer.json()["result"]} \n–í—Å–µ–≥–æ –ø–æ–±–µ–¥: {answer.json()["wins"]}\n–í—Å–µ–≥–æ –∏–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: {answer.json()["average"]}\n–•–æ—á–µ—à—å —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ?)',
                                  reply_markup=keyboards.inline_contno,
                                  )



if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
